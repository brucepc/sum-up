<?php

namespace BPCI\SumUp\Tests\Controller;

use BPCI\SumUp\Checkout\CheckoutClient;
use BPCI\SumUp\Context;
use BPCI\SumUp\Customer\CustomerClient;
use BPCI\SumUp\Exception\BadRequestException;
use BPCI\SumUp\OAuth\AuthenticationHelper;
use BPCI\SumUp\Tests\Entity\Customer;
use BPCI\SumUp\Tests\Entity\Payment;
use BPCI\SumUp\Tests\Form\CheckoutType;
use BPCI\SumUp\Tests\Form\CustomerType;
use BPCI\SumUp\Tests\Form\PaymentType;
use Payum\Core\Payum;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

class DefaultController extends AbstractController
{
    private $context;

    public function __construct()
    {
        $this->context = Context::loadContextFromFile(\realpath(__DIR__.'/../../var/sumup.json'));
    }

    public static function getSubscribedServices()
    {
        return array_merge(
            parent::getSubscribedServices(),
            [
                'payum' => Payum::class,
            ]
        ); // TODO: Change the autogenerated stub
    }

    /**
     * @Route("/", name="index")
     */
    public function index(): Response
    {

        $oauthURI = AuthenticationHelper::getAuthorizationURL($this->context);
        return $this->render('index.html.twig', [
            'authorization_url' => $oauthURI
        ]);
    }

    /**
     * @Route("/token", name="sumup_token")
     */
    public function token(): Response{
        $tokenResponse = AuthenticationHelper::getAccessToken($this->context);
        return $this->render('token.html.twig', [
            'accessToken' => $tokenResponse
        ]);
    }

    /**
     * @Route("/customer", name="sumup_customer")
     */
    public function createCustomer(Request $request): Response {
        $customer = new Customer();
        $form = $this->createForm(CustomerType::class, $customer);
        $form->add('save', SubmitType::class,[
            'label' => 'Create Customer'
        ]);
        $form->handleRequest($request);
        if($form->isSubmitted() && $form->isValid()){
            $customer = $form->getData();
            try{
                $token = AuthenticationHelper::getAccessToken($this->context);
                $customerClient = new CustomerClient($this->context);
                $customerClient->setToken($token);
                $customer = $customerClient->create($customer);
            } catch(BadRequestException $e) {
                $response = $customerClient->getLastResponse();
                return new Response($response->getBody());
            }
        }

        return $this->render('customerForm.html.twig', [
            'form' => $form->createView()
        ]);
    }

    /**
     * @Route("/checkout", name="sumup_checkout")
     *
     * @param Request $request
     * @return Response
     */
    function checkout(Request $request): Response{
        $form = $this->createForm(CheckoutType::class);
        $form->add('save', SubmitType::class, [
            'label' => 'Create Checkout'
        ]);
        $form->handleRequest($request);
        if($form->isSubmitted() && $form->isValid()){
            $checkoutData = $form->getData();
            $client = new CheckoutClient($this->context);
            try{
                $token = AuthenticationHelper::getAccessToken($this->context);
                $checkoutData = $client->create($checkoutData, $token);
            }catch(\Exception $e){
                return new Response($e->getMessage());
            }
        }

        return $this->render('checkoutForm.html.twig', [
        	'checkout' => $checkoutData??null,
            'form' => $form->createView()
        ]);
    }

    /**
     * @Route("new_payment", name="sumup_payum_payment")
     */
    function payment(Request $request, Payum $payum): Response
    {
        $form = $this->createForm(PaymentType::class);
        $form->add(
            'save',
            SubmitType::class,
            [
                'label' => 'New Payment',
            ]
        );
        $form->handleRequest($request);
        if ($form->isSubmitted() && $form->isValid()) {
            $payment = new Payment();
            $data = $form->getData();
            foreach ($data as $key => $value) {
                $payment[$key] = $value;
            }
            $gatewayName = 'sumup_checkout';
            $storage = $payum->getStorage(Payment::class);
            $storage->update($payment);
            $capturaToken = $payum->getTokenFactory()
                ->createCaptureToken($gatewayName, $payment, 'payum_authorize_do');

//            $payment =:w

            return $this->redirect($capturaToken->getTargetUrl());

        }

        return $this->render(
            'payment.html.twig',
            [
                'payment' => $paymentData??null,
                'form' => $form->createView(),
            ]
        );
    }
}
